                                               FIBONACCI SERIES



#include <stdio.h>
int main()
{
    int n, first=0,second=1,next,i;
    printf("Enter number of terms:");
    scanf("%d",&n);
    printf("fibonacci series:");
    for(i == 0 ; i < n ; i++)
    {
        if(i<=1)
        next=i;
        else{
            next=first + second;
            first = second;
            second = next;
        }
        printf("%d",next);
    }
    return 0;
}

Out put:

Enter number of terms:1
fibonacci series:0

=== Code Execution Successful ===
#include <stdio.h>     
int main(){
int num;
    printf("Enter an number:");
    scanf("%d",&num);
    return 0;
} 


Out put:

Enter number of terms:22
fibonacci series:01123581321345589144233377610987159725844181676510946

=== Code Execution Successful ===

                                            FACTORIAL OF A NUMBER


#include <stdio.h>
 int main(){
     int n,i;
     unsigned long long fact = 1;
     printf("Enter a number : ");
     scanf("%d",&n);
     for(i = 1; i <= n; i++){
         fact*=i;
     }
     printf("Factorial of the %d =%d",n,fact);
     return 0;
 }

Out put;


Enter a number : 9
Factorial of the 9 =362880

=== Code Execution Successful ===


                                               ARMSTRONG NUMBER


 #include <stdio.h>
 #include <math.h>
 int main() {
     int num,originalNum,remainder,n=0;
     double result=0;
     printf("Enter an integer : ");
     scanf("%d", &num);
     originalNum=num;
     for(originalNum=num;originalNum=0;++n)
     {
         originalNum/=10;
     }
     while(originalNum!=0){
         remainder=originalNum%10;
         result +=pow(remainder,n);
         originalNum/=10;
     }
     if((int)result == num)
     printf("%d id an Armstrong number\n",num);
     else
     printf("%d is not an Armstrong number\n",num);
     return 0;
 }

     
Out put:

Enter an integer : 11
11 is not an Armstrong number


=== Code Execution Successful ===







































































